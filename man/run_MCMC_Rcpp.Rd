% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_MCMC_Rcpp.R
\name{run_MCMC_Rcpp}
\alias{run_MCMC_Rcpp}
\title{Run MCMC to get posterior samples}
\usage{
run_MCMC_Rcpp(
  OLCA_params,
  probit_params,
  n_runs,
  burn,
  thin,
  K,
  p,
  d,
  n,
  q,
  w_all,
  x_mat,
  y_all,
  V,
  alpha,
  eta,
  mu0,
  Sig0
)
}
\arguments{
\item{OLCA_params}{Output list from `init_OLCA()` containing `pi`, `c_all`, 
and `theta`}

\item{probit_params}{Output list from `init_probit()` containing `xi` and `z_all`}

\item{n_runs}{Number of MCMC iterations}

\item{burn}{Burn-in period}

\item{thin}{Thinning factor}

\item{K}{Number of classes}

\item{p}{Number of exposure items}

\item{d}{Number of exposure categories}

\item{n}{Number of individuals}

\item{q}{Number of regression covariates excluding class assignment}

\item{w_all}{Weights normalized to sum to n. nx1}

\item{x_mat}{Categorical exposure matrix. nxp}

\item{y_all}{Vector of outcomes. nx1}

\item{V}{Regression design matrix without class assignment. nxq}

\item{alpha}{Vector of hyperparameters for pi. Kx1}

\item{eta}{Vector of hyperparameters for theta. dx1}

\item{mu0}{List of vectors of mean hyperparameters for xi. List of K qx1 vectors}

\item{Sig0}{List of matrices of variance hyperparameters for xi. List of K qxq matrices}
}
\value{
Returns list `MCMC_out` containing:
\describe{
  \item{\code{pi_MCMC}}{Matrix of posterior samples for pi. (n_iter)xK}
  \item{\code{theta_MCMC}}{Array of posterior samples for theta. (n_iter)xpxKxd}
  \item{\code{xi_MCMC}}{Array of posterior samples for xi. (n_iter)xKxq}
  \item{\code{c_all_MCMC}}{Matrix of posterior samples for c_all. (n_iter)xn}
  \item{\code{z_all_MCMC}}{Matrix of posterior samples for z_all. (n_iter)xn}
  \item{\code{loglik_MCMC}}{Vector of posterior samples for log-likelihood. (n_iter)x1}
}
}
\description{
`run_MCMC_Rcpp` runs the Gibbs sampler MCMC algorithm using Rcpp to obtain 
posterior samples.
}
\examples{

# Load data and obtain relevant variables
data("sim_data")
data_vars <- sim_data
x_mat <- data_vars$X_data            # Categorical exposure matrix, nxp
y_all <- c(data_vars$Y_data)         # Binary outcome vector, nx1
cluster_id <- data_vars$cluster_id  # Cluster indicators, nx1
sampling_wt <- data_vars$sample_wt

# Obtain dimensions
n <- dim(x_mat)[1]        # Number of individuals
p <- dim(x_mat)[2]        # Number of exposure items
d <- max(apply(x_mat, 2,  # Number of exposure categories
function(x) length(unique(x))))  
# Obtain normalized weights
kappa <- sum(sampling_wt) / n   # Weights norm. constant
w_all <- c(sampling_wt / kappa) # Weights normalized to sum to n, nx1

# Probit model only includes latent class
V <- matrix(1, nrow = n)  
q <- ncol(V)   # Number of regression covariates excluding class assignment

# Set hyperparameters
K <- 30
alpha <- rep(1, K) / K
eta <- rep(1, d)
mu0 <- Sig0 <- vector("list", K)
for (k in 1:K) {
  # MVN(0,1) hyperprior for prior mean of xi
  mu0[[k]] <- stats::rnorm(n = q)
  # InvGamma(3.5, 6.25) hyperprior for prior variance of xi. Assume uncorrelated
  # components and mean variance 2.5 for a weakly informative prior on xi
  Sig0[[k]] <- diag(LaplacesDemon::rinvgamma(n = q, shape = 3.5, scale = 6.25), 
  nrow = q, ncol = q)
}

# First initialize OLCA params
OLCA_params <- init_OLCA(K = K, n = n, p = p, d = d, alpha = alpha, eta = eta)

# Then initialize probit params 
probit_params <- init_probit(K = K, n = n, q = q, V = V, mu0 = mu0, 
Sig0 = Sig0, y_all = y_all, c_all = OLCA_params$c_all)

# Then run MCMC sampling
MCMC_out <- run_MCMC_Rcpp(OLCA_params = OLCA_params, 
probit_params = probit_params, n_runs = 50, burn = 25, thin = 5,
K = K, p = p, d = d, n = n, q = q, w_all = w_all, x_mat = x_mat, 
y_all = y_all, V = V, alpha = alpha, eta = eta, Sig0 = Sig0, mu0 = mu0)
# MCMC_out

}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wolca_var_adjust.R
\name{wolca_var_adjust}
\alias{wolca_var_adjust}
\title{Post-processing variance adjustment}
\usage{
wolca_var_adjust(
  res,
  alpha = NULL,
  eta = NULL,
  num_reps = 100,
  save_res = TRUE,
  save_path = NULL,
  adjust_seed = NULL
)
}
\arguments{
\item{res}{An object of class \code{"wolca"}, resulting from a call to \code{\link[=wolca]{wolca()}},
containing the unadjusted estimates.}

\item{alpha}{Hyperparameter for prior for class membership probabilities
\eqn{\pi}. Default is \code{NULL} and default values are used (see Details below).
If specified, must be (\code{K_max})x1.}

\item{eta}{Hyperparameter for prior for item consumption level probabilities
\eqn{\theta_{jk\cdot}} for each item \eqn{j} and class \eqn{k}, assumed to be
the same across classes. Default is \code{NULL} and default values are used (see
Details below). If specified, must be JxR, where J is the number of exposure
items and R is the maximum number of levels for the exposure.}

\item{num_reps}{Number of bootstrap replicates to use for the variance
adjustment estimate. Default is 100.}

\item{save_res}{Boolean specifying if results should be saved. Default = \code{TRUE}.}

\item{save_path}{String specifying directory and file name to save results,
e.g., "~/Documents/run". Default is \code{NULL}. If this is the same as the file
name specified in \code{\link[=wolca]{wolca()}}, the unadjusted results are overwritten with the
adjusted results.}

\item{adjust_seed}{Numeric seed for variance adjustment. Default is \code{NULL}.}
}
\value{
Returns an object \code{res} of class \code{"wolca"}, which includes all outputs from
\code{\link[=wolca]{wolca()}} as well as a list \code{estimates_adjust} containing:
\describe{
\item{\code{pi_red}}{Matrix of adjusted posterior samples for pi. Mx(K_red),
where M is the number of MCMC iterations after burn-in and thinning.}
\item{\code{theta_red}}{Array of adjusted posterior samples for theta. MxJx(K_red)xR}
\item{\code{pi_med}}{Vector of adjusted posterior median estimates for pi. (K_red)x1}
\item{\code{theta_med}}{Array of adjusted posterior median estimates for theta. px(K_red)xR}
\item{\code{c_all}}{Vector of final individual class assignments from \code{wolca()}. nx1}
\item{\code{pred_class_probs}}{Matrix of individual posterior class
probabilities from \code{wolca()}. nx(K_red)}
}
The \code{runtime} output for \code{res} is also updated to include the runtime for the
variance adjustment in addition to the runtime for the main \code{wolca()} model.

If \code{save_res = TRUE} (default), the updated \code{res} object is saved as
\verb{[save_path]_wolca_results.RData}, overwriting the unadjusted results if the
file names are the same.
}
\description{
\code{wolca_var_adj} applies applies the post-processing variance adjustment after
a call to \code{\link[=wolca]{wolca()}} to correct for underestimation of posterior intervals.
}
\details{
\code{wolca_var_adjust} applies a post-processing variance adjustment that rescales
the variance to obtain correct coverage of posterior intervals, adapted from
Williams and Savitsky (2021). To obtain the rescaling, a sandwich-type
variance is estimated. To estimate the Hessian that composes the "bread" of
the sandwich, the mixture model is specified in Stan and the parameters are
converted to the unconstrained space. Bootstrap replicates are used to
estimate the covariance matrix that composes the "meat" of the sandwich.
If there are any rounding issues, the resulting matrices are mapped to the
nearest positive definite matrix. Next, the rescaling adjustment is derived
and applied to the parameters for all MCMC iterations. Finally, the adjusted
parameters are converted back to the constrained space and the posterior
median parameter estimates are recomputed, now with proper variance estimation.

To save results, set \code{save_res = TRUE} (default) and \code{save_path} to a string
that specifies both the location and the beginning of the file name
(e.g., "~/Documents/run"). The file name will have "_wolca_results.RData"
appended to it, overwriting the unadjusted results if the file names are the
same.

If hyperparameters are left as \code{NULL} (default), the following default
values are used. Let \eqn{K} refer to the final number of latent class
obtained from running \code{\link[=wolca]{wolca()}}, available at \code{res$estimates$K_red}.
For \eqn{\pi}, a Dirichlet prior with hyperparameter \eqn{\alpha = 1/K} for
each component. For \eqn{\theta_{jk\cdot}}, a Dirichlet prior with
hyperparameter  \eqn{\eta_j} equal to \code{rep(1, R_j)} where \code{R_j} is the number
of levels for exposure item j. If \code{R_j < R}, the remaining levels have
hyperparameter set to 0.01. This is done independently for each exposure item j
and is assumed to be the same across latent classes.
}
\examples{
\dontrun{   
# Load simulated data and obtain relevant variables
data("sim_data")
data_vars <- sim_data
x_mat <- data_vars$X_data            # Categorical exposure matrix, nxJ
cluster_id <- data_vars$cluster_id   # Cluster indicators, nx1
stratum_id <- data_vars$true_Si      # Stratum indicators, nx1
sampling_wt <- data_vars$sample_wt   # Survey sampling weights, nx1
n <- dim(x_mat)[1]                   # Number of individuals

# Run wolca
res <- wolca(x_mat = x_mat, sampling_wt = sampling_wt, 
             cluster_id = cluster_id, stratum_id = stratum_id, 
             run_sampler = "both", adapt_seed = 1, n_runs = 50, burn = 25, 
             thin = 1, save_res = FALSE)
       
# Apply variance adjustment to posterior estimates
res_adjust <- wolca_var_adjust(res = res, num_reps = 100, save_res = FALSE, 
                               adjust_seed = 1)                        
}
}
\references{
Williams, M. R., & Savitsky, T. D. (2021). Uncertainty Estimation for
Pseudo‐Bayesian Inference Under Complex Sampling. International Statistical
Review, 89(1), 72-107.
}
\seealso{
\code{\link[=wolca]{wolca()}}
}

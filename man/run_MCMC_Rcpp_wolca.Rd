% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_MCMC_Rcpp_wolca.R
\name{run_MCMC_Rcpp_wolca}
\alias{run_MCMC_Rcpp_wolca}
\title{Run MCMC to get posterior samples for WOLCA}
\usage{
run_MCMC_Rcpp_wolca(
  OLCA_params,
  n_runs,
  burn,
  thin,
  K,
  J,
  R,
  n,
  w_all,
  x_mat,
  alpha,
  eta
)
}
\arguments{
\item{OLCA_params}{Output list from \code{init_OLCA()} containing \code{pi}, \code{c_all},
and \code{theta}}

\item{n_runs}{Number of MCMC iterations. Default is 20000.}

\item{burn}{Number of MCMC iterations to drop as a burn-in period. Default is 10000.}

\item{thin}{Thinning factor for MCMC iterations. Default is 5.}

\item{K}{Number of classes}

\item{J}{Number of exposure items}

\item{R}{Maximum number of exposure categories}

\item{n}{Number of individuals}

\item{w_all}{Weights normalized to sum to n. nx1}

\item{x_mat}{Matrix of multivariate categorical exposures. nxJ}

\item{alpha}{Kx1 vector of hyperparameters for prior for class membership
probabilities \eqn{\pi}}

\item{eta}{JxR matrix of hyperparameters for prior for item consumption
level probabilities \eqn{\theta_{jk\cdot}} for each item \eqn{j} and class
\eqn{k}, assumed to be the same across classes.}
}
\value{
Returns list \code{MCMC_out} containing:
\describe{
\item{\code{pi_MCMC}}{Matrix of posterior samples for pi. (n_iter)xK}
\item{\code{theta_MCMC}}{Array of posterior samples for theta. (n_iter)xJxKxR}
\item{\code{c_all_MCMC}}{Matrix of posterior samples for c_all. (n_iter)xn}
}
}
\description{
\code{run_MCMC_Rcpp_wolca} runs the Gibbs sampler MCMC algorithm using Rcpp to
obtain posterior samples for the two-step unsupervised WOLCA model.
}
\details{
A Gibbs sampler updates the parameters and variables in the following order:
\eqn{\pi}, \code{c_all}, \eqn{\theta}. Class assignments are permuted every 10
iterations to encourage mixing, according to a random permutation sampler.
}
\examples{
# Load data and obtain relevant variables
data("sim_data")
data_vars <- sim_data
x_mat <- data_vars$X_data            # Categorical exposure matrix, nxJ
cluster_id <- data_vars$cluster_id   # Cluster indicators, nx1
sampling_wt <- data_vars$sample_wt

# Obtain dimensions
n <- dim(x_mat)[1]        # Number of individuals
J <- dim(x_mat)[2]        # Number of exposure items
R_j <- apply(x_mat, 2,    # Number of exposure categories for each item
             function(x) length(unique(x)))  
R <- max(R_j)             # Maximum number of exposure categories across items
# Obtain normalized weights
kappa <- sum(sampling_wt) / n   # Weights norm. constant
w_all <- c(sampling_wt / kappa) # Weights normalized to sum to n, nx1

# Set hyperparameters
K <- 30
alpha <- rep(1, K) / K
eta <- matrix(0.01, nrow = J, ncol = R) 
for (j in 1:J) {
  eta[j, 1:R_j[j]] <- rep(1, R_j[j]) 
}

# First initialize OLCA params
OLCA_params <- init_OLCA(K = K, n = n, J = J, R = R, alpha = alpha, eta = eta)

# Then run MCMC sampling
MCMC_out <- run_MCMC_Rcpp_wolca(OLCA_params = OLCA_params, n_runs = 50, 
burn = 25, thin = 5, K = K, J = J, R = R, n = n, w_all = w_all, x_mat = x_mat, 
alpha = alpha, eta = eta)
# MCMC_out

}
\seealso{
\code{\link[=run_MCMC_Rcpp]{run_MCMC_Rcpp()}} \code{\link[=post_process_wolca]{post_process_wolca()}} \code{\link[=get_estimates_wolca]{get_estimates_wolca()}}
\code{\link[=fit_probit_wolca]{fit_probit_wolca()}} \code{\link[=wolca]{wolca()}}
}

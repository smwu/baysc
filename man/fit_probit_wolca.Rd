% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_probit_wolca.R
\name{fit_probit_wolca}
\alias{fit_probit_wolca}
\title{Fit probit model for WOLCA}
\usage{
fit_probit_wolca(
  estimates,
  glm_form,
  stratum_id,
  cluster_id,
  x_mat,
  y_all,
  w_all,
  ci_level = 0.95,
  V,
  q
)
}
\arguments{
\item{estimates}{Output from `get_estimates_wolca()` containing `K_red`, 
`pi_red`, `theta_red`, `pi_med`, `theta_med`, `c_all`, `pred_class_probs`}

\item{glm_form}{String specifying formula to use for probit regression. For 
example, `"y_all ~ c_all"` for the model with only latent class as a covariate.
Must be congruous with `V`.}

\item{stratum_id}{Vector of individual stratum IDs. nx1}

\item{cluster_id}{Vector of individual cluster IDs. nx1}

\item{x_mat}{Categorical exposure matrix. nxp}

\item{y_all}{Vector of outcomes. nx1}

\item{w_all}{Weights normalized to sum to n. nx1}

\item{ci_level}{Confidence interval level. Default is `0.95`.}

\item{V}{Regression design matrix without class assignment. nxq}

\item{q}{Number of regression covariates excluding class assignment}
}
\value{
Returns updated list `estimates` containing the following additional objects:
\describe{
  \item{\code{xi_est}}{Matrix of estimates for xi. (K_red)xq}
  \item{\code{xi_est_lb}}{Matrix of confidence interval lower bound estimates for xi. (K_red)xq}
  \item{\code{xi_est_ub}}{Matrix of confidence interval upper bound estimates for xi. (K_red)xq}
  \item{\code{fit}}{`svyglm` class object with output from the `svyglm` regression model}
}
}
\description{
`fit_probit_wolca` uses `svyglm` to fit a survey-weight probit model in a 
two-step model where the first step derived latent classes using an 
unsupervised WOLCA
}
\examples{
# Load data and obtain relevant variables
data("sim_data")
data_vars <- sim_data
x_mat <- data_vars$X_data            # Categorical exposure matrix, nxp
y_all <- c(data_vars$Y_data)         # Binary outcome vector, nx1
cluster_id <- data_vars$cluster_id  # Cluster indicators, nx1
stratum_id <- data_vars$true_Si      # Stratum indicators, nx1
sampling_wt <- data_vars$sample_wt

# Obtain dimensions
n <- dim(x_mat)[1]        # Number of individuals
p <- dim(x_mat)[2]        # Number of exposure items
d <- max(apply(x_mat, 2,  # Number of exposure categories
function(x) length(unique(x))))  
# Obtain normalized weights
kappa <- sum(sampling_wt) / n   # Weights norm. constant
w_all <- c(sampling_wt / kappa) # Weights normalized to sum to n, nx1

# Set hyperparameters for fixed sampler
K <- 3
alpha <- rep(1, K) / K
eta <- rep(1, d)

# First initialize OLCA params
OLCA_params <- init_OLCA(K = K, n = n, p = p, d = d, alpha = alpha, eta = eta)

# Then run MCMC sampling
MCMC_out <- run_MCMC_Rcpp_wolca(OLCA_params = OLCA_params, n_runs = 50, 
burn = 25, thin = 5, K = K, p = p, d = d, n = n, w_all = w_all, x_mat = x_mat, 
alpha = alpha, eta = eta)

# Then run post-process relabeling
post_MCMC_out <- post_process_wolca(MCMC_out = MCMC_out, p = p, d = d)

# Then obtain posterior estimates for WOLCA
estimates <- get_estimates_wolca(MCMC_out = MCMC_out, 
post_MCMC_out = post_MCMC_out, n = n, p = p, x_mat = x_mat)

# Define probit model data and variables
# Probit model only includes latent class
V <- matrix(1, nrow = n) # Regression design matrix without class assignment
q <- ncol(V)             # Number of regression covariates excluding class assignment
# Survey-weighted regression formula
glm_form <- "y_all ~ c_all"

# Finally run weighted probit regression model
estimates <- fit_probit_wolca(estimates = estimates, glm_form = glm_form, 
stratum_id = stratum_id, cluster_id = cluster_id, x_mat = x_mat, 
y_all = y_all, w_all = w_all, V = V, q = q)

}

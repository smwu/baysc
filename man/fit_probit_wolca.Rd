% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_probit_wolca.R
\name{fit_probit_wolca}
\alias{fit_probit_wolca}
\title{Fit probit model for WOLCA}
\usage{
fit_probit_wolca(
  estimates,
  glm_form,
  stratum_id,
  cluster_id,
  x_mat,
  y_all,
  w_all,
  ci_level = 0.95,
  V_data,
  q
)
}
\arguments{
\item{estimates}{Output from \code{get_estimates_wolca()} containing \code{K_red},
\code{pi_red}, \code{theta_red}, \code{pi_med}, \code{theta_med}, \code{c_all}, \code{pred_class_probs}}

\item{glm_form}{String specifying formula for probit regression, excluding
outcome and latent class. For example, \code{"~ 1"} for the model with only
latent class as covariates. All variables in \code{glm_form} must be found in \code{V_data}.
Do not specify interaction terms for latent class by additional covariates,
as these terms are already included.}

\item{stratum_id}{Vector of individual stratum IDs. nx1. Default is \code{NULL},
indicating no stratification.}

\item{cluster_id}{Vector of individual cluster IDs. nx1. Default is \code{NULL},
indicating each individual is their own cluster.}

\item{x_mat}{Matrix of multivariate categorical exposures. nxJ}

\item{y_all}{Vector of outcomes. nx1}

\item{w_all}{Weights normalized to sum to n. nx1}

\item{ci_level}{Confidence interval level for probit regression coefficient
estimates. Default is \code{0.95}.}

\item{V_data}{Dataframe of additional regression covariates. nxq. Factor
covariates must be converted to factors. If \code{NULL} (default), no additional
covariates are to be included. All variables in \code{glm_form} must
be found in \code{V_data}.}

\item{q}{Number of regression covariates excluding class assignment}
}
\value{
Returns updated list \code{estimates} containing the following additional objects:
\describe{
\item{\code{xi_est}}{Matrix of estimates for xi. (K_red)xq}
\item{\code{xi_est_lb}}{Matrix of confidence interval lower bound estimates for xi. (K_red)xq}
\item{\code{xi_est_ub}}{Matrix of confidence interval upper bound estimates for xi. (K_red)xq}
\item{\code{fit}}{\code{svyglm} class object with output from the \code{svyglm} regression model}
}
}
\description{
\code{fit_probit_wolca} uses \code{svyglm} to fit a survey-weight probit model in a
two-step model where the first step derived latent classes using an
unsupervised WOLCA
}
\details{
Specifies survey design and fits a survey-weighted probit regression model
according to the formula specified in \code{glm_form}. Regression coefficients and
their confidence intervals are obtained from the \code{svyglm()} output. If the
residual degrees of freedom is less than 1, a Wald confidence interval is
manually calculated using a t-distribution with degrees of freedom from the
survey design. The point and interval estimates are then converted into the
factor reference coding format to match the output from \code{swolca()} and \code{solca()}.
}
\examples{
# Load data and obtain relevant variables
data("sim_data")
data_vars <- sim_data
x_mat <- data_vars$X_data            # Categorical exposure matrix, nxp
y_all <- c(data_vars$Y_data)         # Binary outcome vector, nx1
cluster_id <- data_vars$cluster_id  # Cluster indicators, nx1
stratum_id <- data_vars$true_Si      # Stratum indicators, nx1
sampling_wt <- data_vars$sample_wt

# Obtain dimensions
n <- dim(x_mat)[1]        # Number of individuals
J <- dim(x_mat)[2]        # Number of exposure items
R_j <- apply(x_mat, 2,    # Number of exposure categories for each item
             function(x) length(unique(x)))  
R <- max(R_j)             # Maximum number of exposure categories across items
# Obtain normalized weights
kappa <- sum(sampling_wt) / n   # Weights norm. constant
w_all <- c(sampling_wt / kappa) # Weights normalized to sum to n, nx1

# Set hyperparameters for fixed sampler
K <- 3
alpha <- rep(1, K) / K
eta <- matrix(0.01, nrow = J, ncol = R) 
for (j in 1:J) {
  eta[j, 1:R_j[j]] <- rep(1, R_j[j]) 
}

# First initialize OLCA params
OLCA_params <- init_OLCA(K = K, n = n, J = J, R = R, alpha = alpha, eta = eta)

# Then run MCMC sampling
MCMC_out <- run_MCMC_Rcpp_wolca(OLCA_params = OLCA_params, n_runs = 50, 
burn = 25, thin = 5, K = K, J = J, R = R, n = n, w_all = w_all, x_mat = x_mat, 
alpha = alpha, eta = eta)

# Then run post-process relabeling
post_MCMC_out <- post_process_wolca(MCMC_out = MCMC_out, J = J, R = R,
class_cutoff = 0.05)

# Then obtain posterior estimates for WOLCA
estimates <- get_estimates_wolca(MCMC_out = MCMC_out, 
post_MCMC_out = post_MCMC_out, n = n, J = J, x_mat = x_mat)

# Probit model only includes latent class
V_data <- as.data.frame(matrix(1, nrow = n)) # Additional regression covariates
# Survey-weighted regression formula
glm_form <- "~ 1"
# Obtain probit regression design matrix without class assignment
V <- model.matrix(as.formula(glm_form), data = V_data)
# Number of regression covariates excluding class assignment
q <- ncol(V)  

# Finally run weighted probit regression model
estimates <- fit_probit_wolca(estimates = estimates, glm_form = glm_form, 
stratum_id = stratum_id, cluster_id = cluster_id, x_mat = x_mat, 
y_all = y_all, w_all = w_all, V_data = V_data, q = q)

}
\seealso{
\code{\link[=run_MCMC_Rcpp_wolca]{run_MCMC_Rcpp_wolca()}} \code{\link[=post_process_wolca]{post_process_wolca()}}
\code{\link[=get_estimates_wolca]{get_estimates_wolca()}} \code{\link[=wolca]{wolca()}}
}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_estimates_wolca.R
\name{get_estimates_wolca}
\alias{get_estimates_wolca}
\title{Get posterior estimates for WOLCA}
\usage{
get_estimates_wolca(MCMC_out, post_MCMC_out, n, J, x_mat)
}
\arguments{
\item{MCMC_out}{Output from \code{run_MCMC_Rcpp_wolca} containing \code{pi_MCMC},
\code{theta_MCMC}, and \code{c_all_MCMC}}

\item{post_MCMC_out}{output from \code{post_process_wolca} containing \code{K_med}, \code{pi},
and \code{theta}}

\item{n}{Number of individuals}

\item{J}{Number of exposure items}

\item{x_mat}{Matrix of multivariate categorical exposures. nxJ}
}
\value{
Returns list \code{estimates} containing:
\describe{
\item{\code{K_red}}{Number of unique classes}
\item{\code{pi_red}}{Matrix of final posterior samples for pi. Mx(K_red)}
\item{\code{theta_red}}{Array of final posterior samples for theta. MxJx(K_red)xR}
\item{\code{pi_med}}{Vector of posterior median estimates for pi. (K_red)x1}
\item{\code{theta_med}}{Array of posterior median estimates for theta. Jx(K_red)xR}
\item{\code{c_all}}{Vector of final individual class assignments. nx1}
\item{\code{pred_class_probs}}{Matrix of individual posterior class probabilities. nx(K_red)}
}
}
\description{
\code{get_estimates_wolca} obtains posterior parameter samples and estimates prior
for the unsupervised WOLCA model
}
\details{
First, duplicate classes that have the same modal exposure categories
for all items are combined to obtain the number of unique classes, \code{K_red}.
Parameters are then renormalized for the unique classes and posterior median
estimates are computed across MCMC iterations. Using these median estimates,
class assignments \code{c_all} are derived.
}
\examples{
# Load data and obtain relevant variables
data("sim_data")
data_vars <- sim_data
x_mat <- data_vars$X_data            # Categorical exposure matrix, nxJ
cluster_id <- data_vars$cluster_id  # Cluster indicators, nx1
sampling_wt <- data_vars$sample_wt

# Obtain dimensions
n <- dim(x_mat)[1]        # Number of individuals
J <- dim(x_mat)[2]        # Number of exposure items
R_j <- apply(x_mat, 2,    # Number of exposure categories for each item
             function(x) length(unique(x)))  
R <- max(R_j)             # Maximum number of exposure categories across items
# Obtain normalized weights
kappa <- sum(sampling_wt) / n   # Weights norm. constant
w_all <- c(sampling_wt / kappa) # Weights normalized to sum to n, nx1

# Set hyperparameters for fixed sampler
K <- 3
alpha <- rep(1, K) / K
eta <- matrix(0.01, nrow = J, ncol = R) 
for (j in 1:J) {
  eta[j, 1:R_j[j]] <- rep(1, R_j[j]) 
}

# First initialize OLCA params
OLCA_params <- init_OLCA(K = K, n = n, J = J, R = R, alpha = alpha, eta = eta)

# Then run MCMC sampling
MCMC_out <- run_MCMC_Rcpp_wolca(OLCA_params = OLCA_params, n_runs = 50, 
burn = 25, thin = 5, K = K, J = J, R = R, n = n, w_all = w_all, x_mat = x_mat, 
alpha = alpha, eta = eta)

# Then run post-process relabeling
post_MCMC_out <- post_process_wolca(MCMC_out = MCMC_out, J = J, R = R,
class_cutoff = 0.05)

# Then obtain posterior estimates
estimates <- get_estimates_wolca(MCMC_out = MCMC_out, 
post_MCMC_out = post_MCMC_out, n = n, J = J, x_mat = x_mat)

}
\seealso{
\code{\link[=get_estimates]{get_estimates()}} \code{\link[=run_MCMC_Rcpp_wolca]{run_MCMC_Rcpp_wolca()}} \code{\link[=post_process_wolca]{post_process_wolca()}}
\code{\link[=fit_probit_wolca]{fit_probit_wolca()}} \code{\link[=wolca]{wolca()}}
}

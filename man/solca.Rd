% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/solca.R
\name{solca}
\alias{solca}
\title{Run the SOLCA model}
\usage{
solca(
  x_mat,
  y_all,
  V,
  K_max = 30,
  adapt_seed = NULL,
  class_cutoff = 0.05,
  alpha_adapt = NULL,
  eta_adapt = NULL,
  mu0_adapt = NULL,
  Sig0_adapt = NULL,
  alpha_fixed = NULL,
  eta_fixed = NULL,
  mu0_fixed = NULL,
  Sig0_fixed = NULL,
  K_true = NULL,
  fixed_seed = NULL,
  n_runs = 20000,
  burn = 10000,
  thin = 5,
  save_res = TRUE,
  save_path = NULL
)
}
\arguments{
\item{x_mat}{Categorical exposure matrix. nxp}

\item{y_all}{Vector of outcomes. nx1}

\item{V}{Regression design matrix without class assignment. nxq}

\item{K_max}{Upper limit for number of classes. Default is 30.}

\item{adapt_seed}{Numeric seed for adaptive sampler. Default is `NULL`.}

\item{class_cutoff}{Minimum class size proportion when determining number of
classes in adaptive sampler. Default is 0.05.}

\item{alpha_adapt}{Adaptive sampler hyperparameter for prior for pi. Default is `NULL`.}

\item{eta_adapt}{Adaptive sampler hyperparameter for prior for theta. Default is `NULL`.}

\item{mu0_adapt}{List of K qx1 vectors of adaptive sampler mean hyperparameters for xi. Default is `NULL`.}

\item{Sig0_adapt}{List of K qxq matrices of adaptive sampler variance hyperparameters for xi. Default is `NULL`.}

\item{alpha_fixed}{Fixed sampler hyperparameter for prior for pi. Default is `NULL`.}

\item{eta_fixed}{Fixed sampler hyperparameter for prior for theta. Default is `NULL`.}

\item{mu0_fixed}{List of K qx1 vectors of fixed sampler mean hyperparameters for xi. Default is `NULL`.}

\item{Sig0_fixed}{List of K qxq matrices of fixed sampler variance hyperparameters for xi. Default is `NULL`.}

\item{K_true}{True number of classes, if known. If `NULL` (default),
adaptive sampler is run. To skip the adaptive sampler and run the fixed 
sampler directly, specify a value here.}

\item{fixed_seed}{Numeric seed for fixed sampler. Default is `NULL`.}

\item{n_runs}{Number of MCMC iterations. Default is 20000.}

\item{burn}{Number of MCMC iterations to drop as a burn-in period. Default is 10000.}

\item{thin}{Thinning factor for MCMC iterations. Default is 5.}

\item{save_res}{Boolean specifying if results should be saved. Default = `TRUE`.}

\item{save_path}{String specifying directory and file name to save results. Default is `NULL`.}
}
\value{
Returns list `res` containing:
\describe{
  \item{\code{estimates}}{List of posterior model results}
  \item{\code{runtime}}{Total runtime for model}
  \item{\code{data_vars}}{List of data variables used}
  \item{\code{MCMC_out}}{List of full MCMC output}
  \item{\code{post_MCMC_out}}{List of MCMC output after relabeling}
  \item{\code{K_fixed}}{Number of classes used for the fixed sampler}
  \item{\code{K_MCMC}}{If `K_true = NULL` and the adaptive sampler is run,
  output list also contains MCMC output for the number of classes with size
  greater than `class_cutoff` for each iteration}
}

If `save_res = TRUE` (default), also saves `res` as `[save_path]_solca_results.RData`
and, if `K_true = NULL` so that the adaptive sampler is run, list `adapt_MCMC`
is saved as  `[save_path]_solca_adapt.RData`. List `adapt_MCMC` contains:
\describe{
  \item{\code{MCMC_out}}{List of full MCMC output}
  \item{\code{K_fixed}}{Number of classes used for the fixed sampler, 
obtained from the adaptive sampler}
  \item{\code{K_MCMC}}{Adaptive sampler MCMC output for K}
}
}
\description{
`solca` runs an unweighted supervised overfitted latent class analysis (SOLCA)
and saves and returns the results.
}
\examples{
# Load data and obtain relevant variables
data("sim_data")
data_vars <- sim_data
x_mat <- data_vars$X_data            # Categorical exposure matrix, nxp
y_all <- c(data_vars$Y_data)         # Binary outcome vector, nx1
n <- dim(x_mat)[1]        # Number of individuals

# Probit model only includes latent class
V <- matrix(1, nrow = n) # Regression design matrix without class assignment

# Run solca
res <- solca(x_mat = x_mat, y_all = y_all, V = V, adapt_seed = 1, n_runs = 50, 
             burn = 25, thin = 1, save_res = FALSE)

}

// Generated by rstantools.  Do not edit by hand.

/*
    baysc is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    baysc is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with baysc.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_WOLCA_main_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 65> locations_array__ =
  {" (found before start of program)",
  " (in 'WOLCA_main', line 13, column 2 to column 16)",
  " (in 'WOLCA_main', line 14, column 2 to column 25)",
  " (in 'WOLCA_main', line 17, column 2 to column 26)",
  " (in 'WOLCA_main', line 46, column 2 to column 33)",
  " (in 'WOLCA_main', line 47, column 2 to column 29)",
  " (in 'WOLCA_main', line 48, column 2 to column 26)",
  " (in 'WOLCA_main', line 20, column 6 to column 44)",
  " (in 'WOLCA_main', line 19, column 19 to line 21, column 5)",
  " (in 'WOLCA_main', line 19, column 4 to line 21, column 5)",
  " (in 'WOLCA_main', line 18, column 17 to line 22, column 3)",
  " (in 'WOLCA_main', line 18, column 2 to line 22, column 3)",
  " (in 'WOLCA_main', line 53, column 6 to column 36)",
  " (in 'WOLCA_main', line 55, column 8 to column 87)",
  " (in 'WOLCA_main', line 54, column 21 to line 56, column 7)",
  " (in 'WOLCA_main', line 54, column 6 to line 56, column 7)",
  " (in 'WOLCA_main', line 51, column 19 to line 58, column 5)",
  " (in 'WOLCA_main', line 51, column 4 to line 58, column 5)",
  " (in 'WOLCA_main', line 59, column 4 to column 78)",
  " (in 'WOLCA_main', line 62, column 4 to column 59)",
  " (in 'WOLCA_main', line 50, column 17 to line 63, column 3)",
  " (in 'WOLCA_main', line 50, column 2 to line 63, column 3)",
  " (in 'WOLCA_main', line 25, column 23 to column 24)",
  " (in 'WOLCA_main', line 25, column 9 to column 10)",
  " (in 'WOLCA_main', line 25, column 2 to column 26)",
  " (in 'WOLCA_main', line 27, column 2 to column 24)",
  " (in 'WOLCA_main', line 30, column 6 to column 40)",
  " (in 'WOLCA_main', line 29, column 19 to line 31, column 5)",
  " (in 'WOLCA_main', line 29, column 4 to line 31, column 5)",
  " (in 'WOLCA_main', line 28, column 17 to line 32, column 3)",
  " (in 'WOLCA_main', line 28, column 2 to line 32, column 3)",
  " (in 'WOLCA_main', line 36, column 6 to column 36)",
  " (in 'WOLCA_main', line 38, column 8 to column 87)",
  " (in 'WOLCA_main', line 37, column 21 to line 39, column 7)",
  " (in 'WOLCA_main', line 37, column 6 to line 39, column 7)",
  " (in 'WOLCA_main', line 35, column 19 to line 40, column 5)",
  " (in 'WOLCA_main', line 35, column 4 to line 40, column 5)",
  " (in 'WOLCA_main', line 42, column 4 to column 54)",
  " (in 'WOLCA_main', line 34, column 17 to line 43, column 3)",
  " (in 'WOLCA_main', line 34, column 2 to line 43, column 3)",
  " (in 'WOLCA_main', line 2, column 2 to column 17)",
  " (in 'WOLCA_main', line 3, column 2 to column 17)",
  " (in 'WOLCA_main', line 4, column 2 to column 17)",
  " (in 'WOLCA_main', line 5, column 2 to column 17)",
  " (in 'WOLCA_main', line 6, column 8 to column 9)",
  " (in 'WOLCA_main', line 6, column 11 to column 12)",
  " (in 'WOLCA_main', line 6, column 2 to column 14)",
  " (in 'WOLCA_main', line 7, column 18 to column 19)",
  " (in 'WOLCA_main', line 7, column 2 to column 29)",
  " (in 'WOLCA_main', line 9, column 9 to column 10)",
  " (in 'WOLCA_main', line 9, column 2 to column 18)",
  " (in 'WOLCA_main', line 10, column 9 to column 10)",
  " (in 'WOLCA_main', line 10, column 12 to column 13)",
  " (in 'WOLCA_main', line 10, column 2 to column 19)",
  " (in 'WOLCA_main', line 13, column 10 to column 11)",
  " (in 'WOLCA_main', line 14, column 19 to column 20)",
  " (in 'WOLCA_main', line 14, column 22 to column 23)",
  " (in 'WOLCA_main', line 14, column 10 to column 11)",
  " (in 'WOLCA_main', line 17, column 9 to column 10)",
  " (in 'WOLCA_main', line 17, column 12 to column 13)",
  " (in 'WOLCA_main', line 46, column 30 to column 31)",
  " (in 'WOLCA_main', line 46, column 10 to column 11)",
  " (in 'WOLCA_main', line 47, column 26 to column 27)",
  " (in 'WOLCA_main', line 48, column 23 to column 24)",
  " (in 'WOLCA_main', line 48, column 9 to column 10)"};
#include <stan_meta_header.hpp>
class model_WOLCA_main final : public model_base_crtp<model_WOLCA_main> {
private:
  int K;
  int J;
  int R;
  int n;
  std::vector<std::vector<int>> X;
  Eigen::Matrix<double,-1,1> weights_data__;
  Eigen::Matrix<double,-1,1> alpha_data__;
  Eigen::Matrix<double,-1,-1> eta_data__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> weights{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> alpha{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> eta{nullptr, 0, 0};
public:
  ~model_WOLCA_main() {}
  model_WOLCA_main(stan::io::var_context& context__, unsigned int
                   random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_WOLCA_main_namespace::model_WOLCA_main";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 40;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 40;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 41;
      context__.validate_dims("data initialization", "J", "int",
        std::vector<size_t>{});
      J = std::numeric_limits<int>::min();
      current_statement__ = 41;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 41;
      stan::math::check_greater_or_equal(function__, "J", J, 1);
      current_statement__ = 42;
      context__.validate_dims("data initialization", "R", "int",
        std::vector<size_t>{});
      R = std::numeric_limits<int>::min();
      current_statement__ = 42;
      R = context__.vals_i("R")[(1 - 1)];
      current_statement__ = 42;
      stan::math::check_greater_or_equal(function__, "R", R, 1);
      current_statement__ = 43;
      context__.validate_dims("data initialization", "n", "int",
        std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      current_statement__ = 43;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 43;
      stan::math::check_greater_or_equal(function__, "n", n, 1);
      current_statement__ = 44;
      stan::math::validate_non_negative_index("X", "n", n);
      current_statement__ = 45;
      stan::math::validate_non_negative_index("X", "J", J);
      current_statement__ = 46;
      context__.validate_dims("data initialization", "X", "int",
        std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(J)});
      X = std::vector<std::vector<int>>(n,
            std::vector<int>(J, std::numeric_limits<int>::min()));
      {
        std::vector<int> X_flat__;
        current_statement__ = 46;
        X_flat__ = context__.vals_i("X");
        current_statement__ = 46;
        pos__ = 1;
        current_statement__ = 46;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 46;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 46;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 46;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 47;
      stan::math::validate_non_negative_index("weights", "n", n);
      current_statement__ = 48;
      context__.validate_dims("data initialization", "weights", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      weights_data__ = Eigen::Matrix<double,-1,1>::Constant(n,
                         std::numeric_limits<double>::quiet_NaN());
      new (&weights)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(weights_data__.data(), n);
      {
        std::vector<local_scalar_t__> weights_flat__;
        current_statement__ = 48;
        weights_flat__ = context__.vals_r("weights");
        current_statement__ = 48;
        pos__ = 1;
        current_statement__ = 48;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 48;
          stan::model::assign(weights, weights_flat__[(pos__ - 1)],
            "assigning variable weights", stan::model::index_uni(sym1__));
          current_statement__ = 48;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 48;
      stan::math::check_greater_or_equal(function__, "weights", weights, 0);
      current_statement__ = 49;
      stan::math::validate_non_negative_index("alpha", "K", K);
      current_statement__ = 50;
      context__.validate_dims("data initialization", "alpha", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      alpha_data__ = Eigen::Matrix<double,-1,1>::Constant(K,
                       std::numeric_limits<double>::quiet_NaN());
      new (&alpha)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(alpha_data__.data(), K);
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 50;
        alpha_flat__ = context__.vals_r("alpha");
        current_statement__ = 50;
        pos__ = 1;
        current_statement__ = 50;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 50;
          stan::model::assign(alpha, alpha_flat__[(pos__ - 1)],
            "assigning variable alpha", stan::model::index_uni(sym1__));
          current_statement__ = 50;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 51;
      stan::math::validate_non_negative_index("eta", "J", J);
      current_statement__ = 52;
      stan::math::validate_non_negative_index("eta", "R", R);
      current_statement__ = 53;
      context__.validate_dims("data initialization", "eta", "double",
        std::vector<size_t>{static_cast<size_t>(J), static_cast<size_t>(R)});
      eta_data__ = Eigen::Matrix<double,-1,-1>::Constant(J, R,
                     std::numeric_limits<double>::quiet_NaN());
      new (&eta) Eigen::Map<Eigen::Matrix<double,-1,-1>>(eta_data__.data(),
        J, R);
      {
        std::vector<local_scalar_t__> eta_flat__;
        current_statement__ = 53;
        eta_flat__ = context__.vals_r("eta");
        current_statement__ = 53;
        pos__ = 1;
        current_statement__ = 53;
        for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
          current_statement__ = 53;
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            current_statement__ = 53;
            stan::model::assign(eta, eta_flat__[(pos__ - 1)],
              "assigning variable eta", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 53;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 54;
      stan::math::validate_positive_index("pi", "K", K);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("theta", "J", J);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("theta", "K", K);
      current_statement__ = 57;
      stan::math::validate_positive_index("theta", "R", R);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("theta_prod", "J", J);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("theta_prod", "R", R);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("pred_class_probs", "n", n);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("pred_class_probs", "K", K);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("pred_class", "n", n);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("log_cond_c", "n", n);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("log_cond_c", "K", K);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (K - 1) + (J * K * (R - 1));
  }
  inline std::string model_name() const final {
    return "model_WOLCA_main";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_WOLCA_main_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> pi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 1;
      pi = in__.template read_constrain_simplex<
             Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, K);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>> theta =
        std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(J,
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(K,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(R, DUMMY_VAR__)));
      current_statement__ = 2;
      theta = in__.template read_constrain_simplex<
                std::vector<
                  std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>,
                jacobian__>(lp__, J, K, R);
      Eigen::Matrix<local_scalar_t__,-1,-1> theta_prod =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J, R, DUMMY_VAR__);
      current_statement__ = 11;
      for (int j = 1; j <= J; ++j) {
        current_statement__ = 9;
        for (int r = 1; r <= R; ++r) {
          current_statement__ = 7;
          stan::model::assign(theta_prod,
            stan::math::prod(
              stan::model::rvalue(theta, "theta", stan::model::index_uni(j),
                stan::model::index_omni(), stan::model::index_uni(r))),
            "assigning variable theta_prod", stan::model::index_uni(j),
            stan::model::index_uni(r));
        }
      }
      {
        current_statement__ = 22;
        stan::math::validate_non_negative_index("log_cond_c", "n", n);
        current_statement__ = 23;
        stan::math::validate_non_negative_index("log_cond_c", "K", K);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> log_cond_c =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(n,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
        current_statement__ = 25;
        lp_accum__.add(stan::math::dirichlet_lpdf<propto__>(pi, alpha));
        current_statement__ = 30;
        for (int j = 1; j <= J; ++j) {
          current_statement__ = 28;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 26;
            lp_accum__.add(stan::math::dirichlet_lpdf<propto__>(
                             stan::model::rvalue(theta, "theta",
                               stan::model::index_uni(j),
                               stan::model::index_uni(k)),
                             stan::model::rvalue(eta, "eta",
                               stan::model::index_uni(j),
                               stan::model::index_omni())));
          }
        }
        current_statement__ = 39;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 36;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 31;
            stan::model::assign(log_cond_c,
              stan::math::log(
                stan::model::rvalue(pi, "pi", stan::model::index_uni(k))),
              "assigning variable log_cond_c", stan::model::index_uni(i),
              stan::model::index_uni(k));
            current_statement__ = 34;
            for (int j = 1; j <= J; ++j) {
              current_statement__ = 32;
              stan::model::assign(log_cond_c,
                (stan::model::rvalue(log_cond_c, "log_cond_c",
                   stan::model::index_uni(i), stan::model::index_uni(k)) +
                stan::math::categorical_lpmf<false>(
                  stan::model::rvalue(X, "X", stan::model::index_uni(i),
                    stan::model::index_uni(j)),
                  stan::model::rvalue(theta, "theta",
                    stan::model::index_uni(j), stan::model::index_uni(k),
                    stan::model::index_omni()))),
                "assigning variable log_cond_c", stan::model::index_uni(i),
                stan::model::index_uni(k));
            }
          }
          current_statement__ = 37;
          lp_accum__.add((stan::model::rvalue(weights, "weights",
                            stan::model::index_uni(i)) *
            stan::math::log_sum_exp(
              stan::model::rvalue(log_cond_c, "log_cond_c",
                stan::model::index_uni(i)))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_WOLCA_main_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> pi =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      pi = in__.template read_constrain_simplex<
             Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, K);
      std::vector<std::vector<Eigen::Matrix<double,-1,1>>> theta =
        std::vector<std::vector<Eigen::Matrix<double,-1,1>>>(J,
          std::vector<Eigen::Matrix<double,-1,1>>(K,
            Eigen::Matrix<double,-1,1>::Constant(R,
              std::numeric_limits<double>::quiet_NaN())));
      current_statement__ = 2;
      theta = in__.template read_constrain_simplex<
                std::vector<
                  std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>,
                jacobian__>(lp__, J, K, R);
      Eigen::Matrix<double,-1,-1> theta_prod =
        Eigen::Matrix<double,-1,-1>::Constant(J, R,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(pi);
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= J; ++sym3__) {
            out__.write(theta[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 11;
      for (int j = 1; j <= J; ++j) {
        current_statement__ = 9;
        for (int r = 1; r <= R; ++r) {
          current_statement__ = 7;
          stan::model::assign(theta_prod,
            stan::math::prod(
              stan::model::rvalue(theta, "theta", stan::model::index_uni(j),
                stan::model::index_omni(), stan::model::index_uni(r))),
            "assigning variable theta_prod", stan::model::index_uni(j),
            stan::model::index_uni(r));
        }
      }
      if (emit_transformed_parameters__) {
        out__.write(theta_prod);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      std::vector<Eigen::Matrix<double,-1,1>> pred_class_probs =
        std::vector<Eigen::Matrix<double,-1,1>>(n,
          Eigen::Matrix<double,-1,1>::Constant(K,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<int> pred_class =
        std::vector<int>(n, std::numeric_limits<int>::min());
      std::vector<Eigen::Matrix<double,-1,1>> log_cond_c =
        std::vector<Eigen::Matrix<double,-1,1>>(n,
          Eigen::Matrix<double,-1,1>::Constant(K,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 21;
      for (int i = 1; i <= n; ++i) {
        current_statement__ = 17;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 12;
          stan::model::assign(log_cond_c,
            stan::math::log(
              stan::model::rvalue(pi, "pi", stan::model::index_uni(k))),
            "assigning variable log_cond_c", stan::model::index_uni(i),
            stan::model::index_uni(k));
          current_statement__ = 15;
          for (int j = 1; j <= J; ++j) {
            current_statement__ = 13;
            stan::model::assign(log_cond_c,
              (stan::model::rvalue(log_cond_c, "log_cond_c",
                 stan::model::index_uni(i), stan::model::index_uni(k)) +
              stan::math::categorical_lpmf<false>(
                stan::model::rvalue(X, "X", stan::model::index_uni(i),
                  stan::model::index_uni(j)),
                stan::model::rvalue(theta, "theta",
                  stan::model::index_uni(j), stan::model::index_uni(k),
                  stan::model::index_omni()))),
              "assigning variable log_cond_c", stan::model::index_uni(i),
              stan::model::index_uni(k));
          }
        }
        current_statement__ = 18;
        stan::model::assign(pred_class_probs,
          stan::math::exp(
            stan::math::subtract(
              stan::model::rvalue(log_cond_c, "log_cond_c",
                stan::model::index_uni(i), stan::model::index_omni()),
              stan::math::log_sum_exp(
                stan::model::rvalue(log_cond_c, "log_cond_c",
                  stan::model::index_uni(i))))),
          "assigning variable pred_class_probs", stan::model::index_uni(i),
          stan::model::index_omni());
        current_statement__ = 19;
        stan::model::assign(pred_class,
          stan::math::categorical_rng(
            stan::model::rvalue(pred_class_probs, "pred_class_probs",
              stan::model::index_uni(i), stan::model::index_omni()),
            base_rng__), "assigning variable pred_class",
          stan::model::index_uni(i));
      }
      current_statement__ = 4;
      stan::math::check_simplex(function__, "pred_class_probs",
        pred_class_probs);
      current_statement__ = 5;
      stan::math::check_greater_or_equal(function__, "pred_class",
        pred_class, 1);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          out__.write(pred_class_probs[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(pred_class);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          out__.write(log_cond_c[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> pi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(pi,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable pi");
      out__.write_free_simplex(pi);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>> theta =
        std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(J,
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(K,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(R, DUMMY_VAR__)));
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        current_statement__ = 2;
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          current_statement__ = 2;
          for (int sym3__ = 1; sym3__ <= J; ++sym3__) {
            current_statement__ = 2;
            stan::model::assign(theta, in__.read<local_scalar_t__>(),
              "assigning variable theta", stan::model::index_uni(sym3__),
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
          }
        }
      }
      out__.write_free_simplex(theta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "pi", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "theta", "double",
        std::vector<size_t>{static_cast<size_t>(J), static_cast<size_t>(K),
          static_cast<size_t>(R)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> pi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> pi_flat__;
        current_statement__ = 1;
        pi_flat__ = context__.vals_r("pi");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(pi, pi_flat__[(pos__ - 1)],
            "assigning variable pi", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_simplex(pi);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>> theta =
        std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(J,
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(K,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(R, DUMMY_VAR__)));
      {
        std::vector<local_scalar_t__> theta_flat__;
        current_statement__ = 2;
        theta_flat__ = context__.vals_r("theta");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 2;
            for (int sym3__ = 1; sym3__ <= J; ++sym3__) {
              current_statement__ = 2;
              stan::model::assign(theta, theta_flat__[(pos__ - 1)],
                "assigning variable theta", stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 2;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      out__.write_free_simplex(theta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"pi", "theta"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"theta_prod"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"pred_class_probs", "pred_class", "log_cond_c"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(J),
                  static_cast<size_t>(K), static_cast<size_t>(R)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(J),
               static_cast<size_t>(R)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n),
               static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(n)},
             std::vector<size_t>{static_cast<size_t>(n),
               static_cast<size_t>(K)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "pi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= J; ++sym3__) {
          param_names__.emplace_back(std::string() + "theta" + '.' +
            std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
            std::to_string(sym1__));
        }
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
          param_names__.emplace_back(std::string() + "theta_prod" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          param_names__.emplace_back(std::string() + "pred_class_probs" + '.'
            + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "pred_class" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          param_names__.emplace_back(std::string() + "log_cond_c" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= (K - 1); ++sym1__) {
      param_names__.emplace_back(std::string() + "pi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= (R - 1); ++sym1__) {
      for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= J; ++sym3__) {
          param_names__.emplace_back(std::string() + "theta" + '.' +
            std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
            std::to_string(sym1__));
        }
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
          param_names__.emplace_back(std::string() + "theta_prod" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= (K - 1); ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          param_names__.emplace_back(std::string() + "pred_class_probs" + '.'
            + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "pred_class" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          param_names__.emplace_back(std::string() + "log_cond_c" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"pi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(J) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(R) + "}}},\"block\":\"parameters\"},{\"name\":\"theta_prod\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(J) + ",\"cols\":" + std::to_string(R) + "},\"block\":\"transformed_parameters\"},{\"name\":\"pred_class_probs\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"generated_quantities\"},{\"name\":\"pred_class\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_cond_c\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"pi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((K -1)) + "},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(J) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((R -1)) + "}}},\"block\":\"parameters\"},{\"name\":\"theta_prod\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(J) + ",\"cols\":" + std::to_string(R) + "},\"block\":\"transformed_parameters\"},{\"name\":\"pred_class_probs\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((K -1)) + "}},\"block\":\"generated_quantities\"},{\"name\":\"pred_class\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_cond_c\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (K + ((J * K) * R));
    const size_t num_transformed = emit_transformed_parameters * ((J * R));
    const size_t num_gen_quantities = emit_generated_quantities * ((((n * K)
      + n) + (n * K)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (K + ((J * K) * R));
    const size_t num_transformed = emit_transformed_parameters * ((J * R));
    const size_t num_gen_quantities = emit_generated_quantities * ((((n * K)
      + n) + (n * K)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_WOLCA_main_namespace::model_WOLCA_main;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_WOLCA_main_namespace::profiles__;
}
#endif
#endif
